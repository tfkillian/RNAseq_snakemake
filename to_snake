# collect fastq file names and basenames 
# (only the original fastq files, not the post-trimmomatics files named *paired_fastq.gz that 
# could be present in the data folder if the script runs a second time)
ls -1 ../data/*R[1,2].fastq.gz > file_names 
perl -nle 'print m/data\/(.*)_R\d/xms' file_names | sort -u > file_basenames

# prepare reports folders
mkdir ../reports
mkdir ../reports/fastqC/
mkdir ../reports/trimmo
mkdir ../reports/hisat2
mkdir ../reports/htseq

## FastqC analysis
for f in `cat file_names`; 
do /opt/cbio/fastqc/FastQC/fastqc $f -o ../reports/fastqC/; 
done

## Trim reads with trimmomatics 
for f in `cat file_basenames`;
do
java -jar /opt/cbio/trimmomatic/Trimmomatic-0.38/trimmomatic-0.38.jar PE -threads 6 -phred33 \
../data/$f\_R1.fastq.gz \
../data/$f\_R2.fastq.gz \
../data/$f\_R1_paired.fastq.gz \
../data/$f\_R1_unpaired.fastq.gz \
../data/$f\_R2_paired.fastq.gz \
../data/$f\_R2_unpaired.fastq.gz \
ILLUMINACLIP:/opt/cbio/trimmomatic/Trimmomatic-0.38/adapters/TruSeq3-PE-2.fa:2:30:10 LEADING:5 TRAILING:5 SLIDINGWINDOW:10:20 MINLEN:50 \
2> ../reports/trimmo/$f\_trimmo.log;
done

## FastqC analysis on trimmed_fastq files
for f in `cat file_basenames`; 
do /opt/cbio/fastqc/FastQC/fastqc ../data/$f\_R1_paired.fastq.gz -o ../reports/fastqC/; 
/opt/cbio/fastqc/FastQC/fastqc ../data/$f\_R2_paired.fastq.gz -o ../reports/fastqC/; 
done

## Align on genome with hisat2
for f in `cat file_basenames`;
do
/opt/cbio/hisat2/hisat2-2.1.0/hisat2 -p 6 --remove-chrname --dta --summary-file ../reports/hisat2/$f\_hisat2.log \
-x /data/cbio/INDEXES/grcm38_snp_tran/genome_snp_tran \
-1 ../data/$f\_R1_paired.fastq.gz \
-2 ../data/$f\_R2_paired.fastq.gz \
-S ../data/$f.sam;
done

## convert in bam and index 
# don't forget to sort sam files (for indexing, bam have to be sorted by position) 
for f in `cat file_basenames`;
do 
/opt/cbio/samtools/samtools-1.9/samtools view -Sb ../data/$f.sam | /opt/cbio/samtools/samtools-1.9/samtools sort > ../data/$f.bam;
/opt/cbio/samtools/samtools-1.9/samtools index ../data/$f.bam;
done

## htseq-count analysis
# stranded data (-s/--stranded 'reverse')
# unstranded data (-s 'no') 
for f in `cat file_basenames`;
do
htseq-count -q -s no ../data/$f.sam \
../../GTFs/Mus_musculus.GRCm38.94.gtf.gz \
> ../reports/htseq/$f\_htseq_result;
done

## create count_matrix
for f in `cat file_basenames`; 
do 
echo $f > ../reports/htseq/$f\_counts; 
cat ../reports/htseq/$f\_htseq_result | egrep "^ENS" | cut -f2 >> ../reports/htseq/$f\_counts;
done

echo ref > ../reports/htseq/ref

for f in `cat file_basenames | head -n1`; 
do cat ../reports/htseq/$f\_htseq_result | egrep "^ENS" | cut -f1 >> ../reports/htseq/ref;
done

paste ../reports/htseq/ref ../reports/htseq/*_counts > ../reports/htseq/count_matrix

rm ../reports/htseq/ref
rm ../reports/htseq/*_counts
